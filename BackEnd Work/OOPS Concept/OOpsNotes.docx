                                           OOPS (Object Oriented Programming System)
                                                 Features with its Defination
                
                
                 1. Inheritance (Reuseablity).
                
                
                 2. Polymorphism (One name many forms).
                
                
                 3. Encaptulation (Blinding data member and member function in single unit)||(Data hiding).
                
                
                 4. Abstraction (Show functionality only hide complexity).
                
                
                 5. Object (Anything in this real world is know as an Object)&&(Any thing in this Real world is known as Object ),(Physically Exist).
                Ex Pen,Makers ,Laptop etc.
                Object(Real World)                                  Object(Computer)
                 -> Properties(State)                               Data member(Instance Variable)

                 ->Behaviour                                        Member function(Method)
                
                 Data Member                                            Member Function
                 1. Non static                                          Non static                 
                 2. Static                                              Static

                 Rule  :-   non static things is always belongs to Object .
                 Rule  :-   Static thing always belongs to class.
                
                 6. Class (Defination of the object is class).    
                    Defination of class :-  class is a collection of similar type of objects .(logical Entity).
                    class is Template or blueprint of Objects.

                    Ex :- class<class Name>
                    {
                        Field 
                        Method
                        constructor
                        block
                        nested class
                    }
        In java there are 4 ways to initialize Instance Variable
        -> By Reference
        -> By Method
        -> By constructor
        -> By Init Block (Instance initialize Block).

        5 many ways to create object in java 
        -> By new Keyword 
        -> By Factory Method
        -> By newInstance() Method
        ->By clone () method
        -> By Deserialization 

Anonymous object :-
            It means nameless .. An object which has no Reference is know asan Anonymous object . It can be used at the run time of object creation only.

            syntax :-
             new temp(); Anonymous object
            calling method through Anonymous object
            new temp().setData();


    Example :-

    class anonymousObject {
    String penBrand;
    String penColor;
    String penInkcolor;
    double penPrice;
    void setData(String brand ,String color,String inkColor , double price){
        penBrand = brand;
        penColor = color;
        penInkcolor = inkColor;
        penPrice = price;
        displayData();
    }
    void displayData(){
        System.out.println("Brand "+ penBrand);
        System.out.println("Color "+ penColor);
        System.out.println("Ink Color "+ penInkcolor);
        System.out.println("Price "+ penPrice);
    }
    public static void main(String[] args) { 
        new anonymousObject().setData("uni-ball","Red","Black",2000.00);
    }    
}

Creation of object of one type only in single line 

    class test {
        String micName;
        int price;
        void setData(String name,int micPrice){
            micName = name;
            price = micPrice;
        }
        void displayData(){
            System.out.println("Mic name is "+ micName); 
            System.out.println("Mic price is "+ price); 
        }
        public static void main(String []args){
            test t1 = new test(),t2= new test(),t3 = new test();  // Creation of object of one type only in single line 
        }
    }

    this Keyword in java :-

    In Java this is a Reference Variable that holds Reference id of current object Reference id .(Object)

    class pratice {
    int id ;
    String Name ;
    String Profile;
    void setData(int id, String Name,String Profile){
        this.id = id;
        this.Name = Name;
        this.Profile = Profile;

    }
    void displayData(){
        System.out.println("Id "+id);
        System.out.println("Name "+Name);
        System.out.println("Profile "+Profile);
    }
    public static void main(String []args){
        pratice p1 = new pratice();
        p1.setData(1001,"Abhi","Java Dev");
        p1.displayData();
    }
}

    this to invoke current class method (Non - Static). 
    this () to invoke current class constructor (constructor chaining). It is used to reuse the constructor . this must be the first statement in constructor.

    this : - to pass as argument in the constructor call.

    this Keyword can be use to return current class Instance.

   class test{
    test fun1(){
        System.out.println("I am fun1");
        return this;
    }
    test fun2(){
        System.out.println("I am fun2");
        return this;
    }
    test fun3(){
        System.out.println("I am fun3");
        return this;
    }
    test fun4(){
        System.out.println("I am fun4");
        return this;
    }
    void fun5(){
        System.out.println("I am fun5");
    }
    public static void main(String []args){
        new test().fun1().fun2().fun3().fun4().fun5();
    }
}


    this :- to pass as an argument in the method.

    class test{
        void show (test t){
            System.out.println("Hello I am Show");
        }
        void display(){
            System.out.println("Hello I am Display");
            show(this);
        }
        public static void main(String []args){
            test t = new test();
            t.display();
        }
    }



    Example :-

    public class This {
    int bookId;
    String bookName;
    String bookAuthor;
    double bookPrice;
    
    void insertData(int bookId,String bookName,String bookAuthor,double bookPrice){
        this.bookId = bookId;
        this.bookName = bookName;
        this.bookAuthor = bookAuthor;
        this.bookPrice = bookPrice;
        // display(); // compiler automatically add this .
        this.display(); 
    }
    void display(){
        System.out.println("Book_Id "+bookId);
        System.out.println("Book_Name "+bookName);
        System.out.println("Book_Author "+bookAuthor);
        System.out.println("Book_Price "+bookPrice);
    }
    public static void main(String []args){
            This t1 = new This();
            t1.insertData(101, "Java" , "XYZ", 800);
    }
    
}

What is this Keyword stores ?

class test{
    void display(){
        System.out.println(this);
    }
    public static void main(String []args){
        test t1 = new test();
        System.out.println(t1);
        t1.display();
    }
}



OOPS 1 :-
Rule 1 :- whenever class level Variable (Instance Variable)and local Variable both are having same name then this concept is know as Data shodowing.


