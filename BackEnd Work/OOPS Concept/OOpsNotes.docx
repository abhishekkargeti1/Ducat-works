                                           OOPS (Object Oriented Programming System)
                                                 Features with its Defination
                
                
                 1. Inheritance (Reuseablity).
                
                
                 2. Polymorphism (One name many forms).
                
                
                 3. Encaptulation (Blinding data member and member function in single unit)||(Data hiding).
                
                
                 4. Abstraction (Show functionality only hide complexity).
                
                
                 5. Object (Anything in this real world is know as an Object)&&(Any thing in this Real world is known as Object ),(Physically Exist).
                Ex Pen,Makers ,Laptop etc.
                Object(Real World)                                  Object(Computer)
                 -> Properties(State)                               Data member(Instance Variable)

                 ->Behaviour                                        Member function(Method)
                
                 Data Member                                            Member Function
                 1. Non static                                          Non static                 
                 2. Static                                              Static

                 Rule  :-   non static things is always belongs to Object .
                 Rule  :-   Static thing always belongs to class.
                
                 6. Class (Defination of the object is class).    
                    Defination of class :-  class is a collection of similar type of objects .(logical Entity).
                    class is Template or blueprint of Objects.

                    Ex :- class<class Name>
                    {
                        Field 
                        Method
                        constructor
                        block
                        nested class
                    }
        In java there are 4 ways to initialize Instance Variable
        -> By Reference
        -> By Method
        -> By constructor
        -> By Init Block (Instance initialize Block).

        5 many ways to create object in java 
        -> By new Keyword 
        -> By Factory Method
        -> By newInstance() Method
        ->By clone () method
        -> By Deserialization 

Anonymous object :-
            It means nameless .. An object which has no Reference is know asan Anonymous object . It can be used at the run time of object creation only.

            syntax :-
             new temp(); Anonymous object
            calling method through Anonymous object
            new temp().setData();


    Example :-

    class anonymousObject {
    String penBrand;
    String penColor;
    String penInkcolor;
    double penPrice;
    void setData(String brand ,String color,String inkColor , double price){
        penBrand = brand;
        penColor = color;
        penInkcolor = inkColor;
        penPrice = price;
        displayData();
    }
    void displayData(){
        System.out.println("Brand "+ penBrand);
        System.out.println("Color "+ penColor);
        System.out.println("Ink Color "+ penInkcolor);
        System.out.println("Price "+ penPrice);
    }
    public static void main(String[] args) { 
        new anonymousObject().setData("uni-ball","Red","Black",2000.00);
    }    
}

Creation of object of one type only in single line 

    class test {
        String micName;
        int price;
        void setData(String name,int micPrice){
            micName = name;
            price = micPrice;
        }
        void displayData(){
            System.out.println("Mic name is "+ micName); 
            System.out.println("Mic price is "+ price); 
        }
        public static void main(String []args){
            test t1 = new test(),t2= new test(),t3 = new test();  // Creation of object of one type only in single line 
        }
    }

    this Keyword in java :-

    In Java this is a Reference Variable that holds Reference id of current object Reference id .(Object)

    class pratice {
    int id ;
    String Name ;
    String Profile;
    void setData(int id, String Name,String Profile){
        this.id = id;
        this.Name = Name;
        this.Profile = Profile;

    }
    void displayData(){
        System.out.println("Id "+id);
        System.out.println("Name "+Name);
        System.out.println("Profile "+Profile);
    }
    public static void main(String []args){
        pratice p1 = new pratice();
        p1.setData(1001,"Abhi","Java Dev");
        p1.displayData();
    }
}

    this to invoke current class method (Non - Static). 
    this () to invoke current class constructor (constructor chaining). It is used to reuse the constructor . this must be the first statement in constructor.

    this : - to pass as argument in the constructor call.

    this Keyword can be use to return current class Instance.

   class test{
    test fun1(){
        System.out.println("I am fun1");
        return this;
    }
    test fun2(){
        System.out.println("I am fun2");
        return this;
    }
    test fun3(){
        System.out.println("I am fun3");
        return this;
    }
    test fun4(){
        System.out.println("I am fun4");
        return this;
    }
    void fun5(){
        System.out.println("I am fun5");
    }
    public static void main(String []args){
        new test().fun1().fun2().fun3().fun4().fun5();
    }
}


    this :- to pass as an argument in the method.

    class test{
        void show (test t){
            System.out.println("Hello I am Show");
        }
        void display(){
            System.out.println("Hello I am Display");
            show(this);
        }
        public static void main(String []args){
            test t = new test();
            t.display();
        }
    }



    Example :-

    public class This {
    int bookId;
    String bookName;
    String bookAuthor;
    double bookPrice;
    
    void insertData(int bookId,String bookName,String bookAuthor,double bookPrice){
        this.bookId = bookId;
        this.bookName = bookName;
        this.bookAuthor = bookAuthor;
        this.bookPrice = bookPrice;
        // display(); // compiler automatically add this .
        this.display(); 
    }
    void display(){
        System.out.println("Book_Id "+bookId);
        System.out.println("Book_Name "+bookName);
        System.out.println("Book_Author "+bookAuthor);
        System.out.println("Book_Price "+bookPrice);
    }
    public static void main(String []args){
            This t1 = new This();
            t1.insertData(101, "Java" , "XYZ", 800);
    }
    
}

What is this Keyword stores ?

class test{
    void display(){
        System.out.println(this);
    }
    public static void main(String []args){
        test t1 = new test();
        System.out.println(t1);
        t1.display();
    }
}



OOPS 1 :-
Rule 1 :- whenever class level Variable (Instance Variable)and local Variable both are having same name then this concept is know as Data shodowing.

Constructor in java.

Constructor is a block of codes similar to the method. it is called whaen Instance of the class is created. At the time of calling constructor, mermory for the object is allocated in the mermory.

Every time an object is created using the new Keyword at least one constructor is called.

Rules :-

1. Constructor name must be same as its class.
2. A constructor must have no explicit return type.

Two types of constructor

1.  Non argument constructor
2. argument constructor /Parametrized Constructor .


Example of Non argument Constructor

class Test{
    test(){
        System.out.println("Default Constructor");
    }
}

Parametrized Constructor Example

class Test{
    test(int x , int y){
        System.out.println("DParametrized Constructor");
    }
}



Prove that compiler run automatically constructor on the object creation.

class test{
    public static void main(String []args){
        System.out.println("Hello world");
    }
}

use javap on command line.

Default constructor is used to provide the Default values to the object like 0 , null.


Java Parametrized Constructor

A constructor which has specific number of Parametrized is called a Parametrized Constructor.

class student {
    int stuId;
    String stuName;
    String stuCourse;
    student(int stuId,String stuName,String stuCourse){
        this.stuId=stuId;
        this.stuName=stuName;
        this.stuCourse=stuCourse;
    }
    void display(){
        System.out.println( stuId +" "+stuName+" "+stuCourse);
    }
    public static void main(String []args){
        student s1 = new student(101,"Abhishek","BCA");
        s1.display();
    }
}


Constructor OverLoading -:

class RegistrationForm{  
    String name;  
    String email;  
    String password;  
    long phone_number;  
    String gender;  
    String language;  
    int zip_code;  
    String about;   
    RegistrationForm(String name,String email,String password,long phone_number,String gender,String language,int zip_code){    
        this.name=name;    
        this.email=email;    
        this.password=password;    
        this.phone_number=phone_number;    
        this.gender=gender;    
        this.language=language;    
        this.zip_code=zip_code;    
        System.out.println("Name: "+name);    
        System.out.println("Email: "+email);    
        System.out.println("Password: "+password);    
        System.out.println("Phone Number: "+phone_number);    
        System.out.println("Gender: "+gender);    
        System.out.println("Language: "+language);    
        System.out.println("Zip Code: "+zip_code);    
        System.out.println();  \
        }    
        RegistrationForm(String name,String email,String password,long phone_number,String gender,String language,int zip_code,String about)
        {    
        this.name=name;    
        this.email=email;    
        this.password=password;    
        this.phone_number=phone_number;    
        this.gender=gender;    
        this.language=language;    
        this.zip_code=zip_code;    
        this.about=about;        
        System.out.println("Name: "+name);    
        System.out.println("Email: "+email);    
        System.out.println("Password: "+password);    
        System.out.println("Phone Number: "+phone_number);    
        System.out.println("Gender: "+gender);    
        System.out.println("Language: "+language);    
        System.out.println("Zip Code: "+zip_code);    
        System.out.println("About   : "+about);  
        }    
        RegistrationForm()  {    
            System.out.println("Name: "+name);    
            System.out.println("Email: "+email);   
            System.out.println("Password: "+password);    
            System.out.println("Phone Number: "+phone_number);    
            System.out.println("Gender: "+gender);    
            System.out.println("Language: "+language);    
            System.out.println("Zip Code: "+zip_code);    
            System.out.println("About   : "+about);      
            }    
            public static void main(String[] args)  {    
                RegistrationForm r1 = new RegistrationForm("Amit","Amit@gmail.com","Hello@123",9354474625l,"Male","English",110043);        RegistrationForm r2 = new RegistrationForm("Ajay","Ajay@gmail.com","Ajay@123",9354474625l,"Male","English",110043,"Hello Hi I am Java pro Programmer ");
                RegistrationForm r3 = new RegistrationForm();  
                }
    }

Difference between constructor and method.

Constructor                                                     Method
A constructor is used to initialize                             A method is used to exose the Behaviour of an object.
to state of object.                                             A method must have a return type.
The constructor must have no return type.
The constructor is invoke implicitly.                           The method is invoke explicitly.


We can make class name method is java .

Here is the Example:-


class Constructor {
    int bookId;
    String bookName;
    String bookAuthor;
    double bookPrice;
    
    Constructor(int bookId,String bookName,String bookAuthor,double bookPrice){
        this.bookId= bookId;
        this.bookAuthor=bookAuthor;
        this.bookName=bookName;
        this.bookPrice=bookPrice;
        Constructor();
    }
    void Constructor(){
        System.out.println("BookId "+ bookId);
        System.out.println("BookAuthor "+ bookAuthor);
        System.out.println("BookName "+ bookName);
        System.out.println("BookPrice "+ bookPrice);
    }
    public static void main(String []args){
        Constructor c1 = new Constructor(101,"Java","Abhishek",800);
    }
    
}

Java copy Constructor 

There is no copy constructor in java . However we can copy the values from one object to another object.


class Constructor {
   String name;
   int age;
   String course;
   Constructor(String name,int age ,String course){
    this.name= name;
    this.age=age;
    this.course=course;
   }
   Constructor(Constructor c1){
    name = c1.name;
    age = c1.age;
    course = c1.course;
   }
   void display(){
    System.out.println(name+" "+age+" "+course);
   }

    public static void main(String []args){
        Constructor c1 = new Constructor("Abhishek",22,"BCA");
        Constructor c2 = new Constructor(c1);
        c1.display();
        c2.display();
    }
    
}


Copy one object value into another by Reference.

class pratice{
    String name ;
    String brand;
    String price;
    public static void main(String []args){
        pratice p1 = new pratice();
        p1.name ="Abhishek";
        p1.brand="Iphone";
        p1.price="12000";
        System.out.println(p1.name+" "+p1.brand+" "+p1.price);
        pratice p2 = new pratice();
        p2=p1;
        System.out.println(p2.name+" "+p2.brand+" "+p2.price);
    }
}


Does constructor return any value ?

Yes ,it the current class Instance (You cannot use return type yet it returns a value ).

Can constructor perfrom other task instead of  initialization?

yes like a object creation , starting a thread , calling a method etc. 

Is there Constructor class in java?

yes, java.lang.reflect.Constructor.


Constructor Channing :-

this () : to invoke current class constructor (Constructor Chaining ).

Rule :- this() must be first line in constructor.

Rule ;- create one constructor without using this () as function to break the chain.


class temp {
        temp(){
            System.out.println("Default Constructor");
        }   
        temp(int x){
            this();//this must be in first line.
            System.out.println(x);
        } 
        temp(int x,int y){
            this(100);//this must be in first line.
            System.out.println(x+y);
        } 
        temp(int x,int y,int z){
            this(100,200);//this must be in first line.
            System.out.println(x+y+z);
        } 
        public static void main(String []args){
            new temp(100,200,300);
        }
}
